// <auto-generated />
using System;
using BDA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BDA.Migrations
{
    [DbContext(typeof(BdaDBContext))]
    [Migration("20191103100449_AddIdColumnForUserRole2")]
    partial class AddIdColumnForUserRole2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BDA.Entities.AccountingTable", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Amount");

                    b.Property<string>("CONW");

                    b.Property<string>("CONWNo");

                    b.Property<string>("CostObject");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Currency");

                    b.Property<string>("DrCr");

                    b.Property<string>("GLAccount");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TaxAmount");

                    b.Property<string>("TaxCode");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<Guid>("WangHangusId");

                    b.HasKey("Id");

                    b.HasIndex("WangHangusId");

                    b.ToTable("AccountingTable");
                });

            modelBuilder.Entity("BDA.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileExtension");

                    b.Property<string>("FileId");

                    b.Property<string>("FileName");

                    b.Property<string>("FileSubType");

                    b.Property<string>("FileType");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("ParentId");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("BDA.Entities.BankDraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedOn");

                    b.Property<string>("ApproverComment");

                    b.Property<string>("ApproverId");

                    b.Property<string>("BankDrafNoIssued");

                    b.Property<DateTime?>("CompletedOn");

                    b.Property<string>("CoverMemoRefNo");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreatedByName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DraftedOn");

                    b.Property<string>("InstructionLetterRefNo");

                    b.Property<string>("PostageNo");

                    b.Property<string>("ReceiptNo");

                    b.Property<DateTime?>("ReceiveBankDraftDate");

                    b.Property<string>("ReceiverContactNo");

                    b.Property<string>("RefNo");

                    b.Property<string>("RequesterComment");

                    b.Property<string>("RequesterId");

                    b.Property<string>("RequestorComment");

                    b.Property<string>("SendMethod");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("SubmittedOn");

                    b.Property<string>("TGBSAcceptanceId");

                    b.Property<DateTime?>("TGBSAcceptedOn");

                    b.Property<DateTime?>("TGBSIssuedOn");

                    b.Property<string>("TGBSIssuerId");

                    b.Property<DateTime?>("TGBSProcessedOn");

                    b.Property<string>("TGBSProcesserId");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<DateTime?>("VerifiedOn");

                    b.Property<string>("VerifierComment");

                    b.Property<string>("VerifierId");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("RequesterId");

                    b.HasIndex("TGBSAcceptanceId");

                    b.HasIndex("TGBSIssuerId");

                    b.HasIndex("TGBSProcesserId");

                    b.HasIndex("VerifierId");

                    b.ToTable("BankDraft");
                });

            modelBuilder.Entity("BDA.Entities.BankDraftAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionRole");

                    b.Property<int>("ActionType");

                    b.Property<Guid>("BankDraftId");

                    b.Property<string>("ById");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("On");

                    b.HasKey("Id");

                    b.HasIndex("BankDraftId");

                    b.HasIndex("ById");

                    b.ToTable("BankDraftAction");
                });

            modelBuilder.Entity("BDA.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("BDA.Entities.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("BDA.Entities.ERMSQueues", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("ActionDate");

                    b.Property<Guid?>("BankDrafIdId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Function");

                    b.Property<bool>("IsActive");

                    b.Property<string>("RefNo");

                    b.Property<string>("Status");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("BankDrafIdId");

                    b.ToTable("ERMSQueues");
                });

            modelBuilder.Entity("BDA.Entities.EmailQueues", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Attachments");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ObjectId");

                    b.Property<DateTime>("ProcessedOn");

                    b.Property<DateTime>("ScheduledOn");

                    b.Property<DateTime>("SentOn");

                    b.Property<string>("Subject");

                    b.Property<string>("ToAddress");

                    b.Property<string>("ToName");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("EmailQueues");
                });

            modelBuilder.Entity("BDA.Entities.Function", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("DivisionId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("BDA.Entities.InstructionLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("BankAccount");

                    b.Property<string>("BankName");

                    b.Property<string>("ChargedBankAccount");

                    b.Property<string>("CostObject");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Currency");

                    b.Property<string>("InstructionLetterEmail");

                    b.Property<DateTime?>("LetterDate");

                    b.Property<string>("LetterRefNo");

                    b.Property<string>("ReferenceNo");

                    b.Property<string>("Remarks");

                    b.Property<string>("Status");

                    b.Property<string>("TaxAmount");

                    b.Property<string>("TaxCode");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.ToTable("InstructionLetter");
                });

            modelBuilder.Entity("BDA.Entities.InstructionLetterAttachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AttachmentId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("InstructionLetterId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("InstructionLetterId");

                    b.ToTable("InstructionLetterAttachment");
                });

            modelBuilder.Entity("BDA.Entities.Memo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverRefNo");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("IssuedBDReceiverContactNo");

                    b.Property<string>("ReferenceNo");

                    b.Property<string>("SendingMethod");

                    b.Property<string>("Status");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.ToTable("Memo");
                });

            modelBuilder.Entity("BDA.Entities.MemoAttachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AttachmentId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("MemoId");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("MemoId");

                    b.ToTable("MemoAttachment");
                });

            modelBuilder.Entity("BDA.Entities.RunningNo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.Property<int>("RunNo");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.ToTable("RunningNo");
                });

            modelBuilder.Entity("BDA.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("BDA.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<Guid>("ZoneId");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("BDA.Entities.VendorNo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("VendorNo");
                });

            modelBuilder.Entity("BDA.Entities.WangCagaran", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alamat1");

                    b.Property<string>("Alamat2");

                    b.Property<string>("Bandar");

                    b.Property<Guid>("BankDraftId");

                    b.Property<string>("CajKod");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ErmsDocNo");

                    b.Property<bool?>("JKRInvolved");

                    b.Property<string>("JKRType");

                    b.Property<decimal?>("Jumlah")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("KeteranganKerja");

                    b.Property<string>("NamaPemegangCagaran");

                    b.Property<string>("Negeri");

                    b.Property<string>("Pemula");

                    b.Property<string>("Poskod");

                    b.Property<DateTime?>("Tarikh");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("WBSProjekNo");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("BankDraftId");

                    b.ToTable("WangCagaran");
                });

            modelBuilder.Entity("BDA.Entities.WangCagaranAttachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AttachmentId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<Guid>("WangCagaranId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("WangCagaranId");

                    b.ToTable("WangCagaranAttachment");
                });

            modelBuilder.Entity("BDA.Entities.WangHangus", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("BankAccount");

                    b.Property<string>("BankCountry");

                    b.Property<Guid>("BankDraftId");

                    b.Property<string>("BusRegNo");

                    b.Property<string>("BusinessArea");

                    b.Property<string>("City");

                    b.Property<string>("CoCode");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ICNo");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("PONumber");

                    b.Property<string>("Postcode");

                    b.Property<string>("Region");

                    b.Property<string>("SSTRegNo");

                    b.Property<string>("Street");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("VendorName");

                    b.Property<string>("VendorNo");

                    b.Property<string>("VendorType");

                    b.HasKey("Id");

                    b.HasIndex("BankDraftId");

                    b.ToTable("WangHangus");
                });

            modelBuilder.Entity("BDA.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("FunctionId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<bool>("NeedDivision");

                    b.Property<bool>("NeedFunction");

                    b.Property<bool>("NeedUnit");

                    b.Property<bool>("NeedZone");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("AuthenticationMethod");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Division");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastLogin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OfficeNo");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("Unit");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<Guid?>("DivisionId");

                    b.Property<Guid?>("FunctionId");

                    b.Property<Guid>("Id");

                    b.Property<Guid?>("UnitId");

                    b.Property<Guid?>("ZoneId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UnitId");

                    b.HasIndex("ZoneId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BDA.Entities.AccountingTable", b =>
                {
                    b.HasOne("BDA.Entities.WangHangus", "WangHangus")
                        .WithMany("AccountingTable")
                        .HasForeignKey("WangHangusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.BankDraft", b =>
                {
                    b.HasOne("BDA.Identity.ApplicationUser", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId");

                    b.HasOne("BDA.Identity.ApplicationUser", "TGBSAcceptance")
                        .WithMany()
                        .HasForeignKey("TGBSAcceptanceId");

                    b.HasOne("BDA.Identity.ApplicationUser", "TGBSIssuer")
                        .WithMany()
                        .HasForeignKey("TGBSIssuerId");

                    b.HasOne("BDA.Identity.ApplicationUser", "TGBSProcesser")
                        .WithMany()
                        .HasForeignKey("TGBSProcesserId");

                    b.HasOne("BDA.Identity.ApplicationUser", "Verifier")
                        .WithMany()
                        .HasForeignKey("VerifierId");
                });

            modelBuilder.Entity("BDA.Entities.BankDraftAction", b =>
                {
                    b.HasOne("BDA.Entities.BankDraft", "BankDraft")
                        .WithMany()
                        .HasForeignKey("BankDraftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BDA.Identity.ApplicationUser", "By")
                        .WithMany()
                        .HasForeignKey("ById");
                });

            modelBuilder.Entity("BDA.Entities.ERMSQueues", b =>
                {
                    b.HasOne("BDA.Entities.BankDraft", "BankDrafId")
                        .WithMany()
                        .HasForeignKey("BankDrafIdId");
                });

            modelBuilder.Entity("BDA.Entities.Function", b =>
                {
                    b.HasOne("BDA.Entities.Division", "Division")
                        .WithMany("Function")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.InstructionLetterAttachment", b =>
                {
                    b.HasOne("BDA.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("BDA.Entities.InstructionLetter", "InstructionLetter")
                        .WithMany("Attachments")
                        .HasForeignKey("InstructionLetterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.MemoAttachment", b =>
                {
                    b.HasOne("BDA.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("BDA.Entities.Memo", "Memo")
                        .WithMany("Attachments")
                        .HasForeignKey("MemoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.Unit", b =>
                {
                    b.HasOne("BDA.Entities.Zone", "Zone")
                        .WithMany("Unit")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.WangCagaran", b =>
                {
                    b.HasOne("BDA.Entities.BankDraft", "BankDraft")
                        .WithMany()
                        .HasForeignKey("BankDraftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.WangCagaranAttachment", b =>
                {
                    b.HasOne("BDA.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("BDA.Entities.WangCagaran", "WangCagaran")
                        .WithMany()
                        .HasForeignKey("WangCagaranId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.WangHangus", b =>
                {
                    b.HasOne("BDA.Entities.BankDraft", "BankDraft")
                        .WithMany()
                        .HasForeignKey("BankDraftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Entities.Zone", b =>
                {
                    b.HasOne("BDA.Entities.Function", "Function")
                        .WithMany("Zone")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("BDA.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("BDA.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("BDA.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("BDA.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("BDA.Entities.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("BDA.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BDA.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.HasOne("BDA.Identity.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BDA.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("BDA.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("BDA.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
